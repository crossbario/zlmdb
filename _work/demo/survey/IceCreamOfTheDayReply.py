# automatically generated by the FlatBuffers compiler, do not modify

# namespace: survey

import flatbuffers

# /// Replies to ice cream surveys.
class IceCreamOfTheDayReply(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIceCreamOfTheDayReply(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IceCreamOfTheDayReply()
        x.Init(buf, n + offset)
        return x

    # IceCreamOfTheDayReply
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Your age in years.
    # IceCreamOfTheDayReply
    def Age(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

# /// Your gender.
    # IceCreamOfTheDayReply
    def Gender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 2

# /// SHA256 of your email address.
    # IceCreamOfTheDayReply
    def HashedEmail(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # IceCreamOfTheDayReply
    def HashedEmailAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # IceCreamOfTheDayReply
    def HashedEmailLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Survey flag: you like lemon ice cream?
    # IceCreamOfTheDayReply
    def LikesLemon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

# /// Survey flag: you like strawberry ice cream?
    # IceCreamOfTheDayReply
    def LikesStrawberry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

# /// Survey flag: you like chocolate ice cream?
    # IceCreamOfTheDayReply
    def LikesChocolate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def IceCreamOfTheDayReplyStart(builder): builder.StartObject(6)
def IceCreamOfTheDayReplyAddAge(builder, age): builder.PrependUint16Slot(0, age, 0)
def IceCreamOfTheDayReplyAddGender(builder, gender): builder.PrependUint8Slot(1, gender, 2)
def IceCreamOfTheDayReplyAddHashedEmail(builder, hashedEmail): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(hashedEmail), 0)
def IceCreamOfTheDayReplyStartHashedEmailVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def IceCreamOfTheDayReplyAddLikesLemon(builder, likesLemon): builder.PrependBoolSlot(3, likesLemon, 0)
def IceCreamOfTheDayReplyAddLikesStrawberry(builder, likesStrawberry): builder.PrependBoolSlot(4, likesStrawberry, 0)
def IceCreamOfTheDayReplyAddLikesChocolate(builder, likesChocolate): builder.PrependBoolSlot(5, likesChocolate, 0)
def IceCreamOfTheDayReplyEnd(builder): return builder.EndObject()
