# automatically generated by the FlatBuffers compiler, do not modify

# namespace: accelstorage

import flatbuffers

# /// A time range.
class TimeRange(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTimeRange(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimeRange()
        x.Init(buf, n + offset)
        return x

    # TimeRange
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TimeRange
    def Foo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

# /// Unix epoch start time or 0 for infinity into the past.
    # TimeRange
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Unix epoch end time or 0 for infinity into the future.
    # TimeRange
    def Endof(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # TimeRange
    def Bar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def TimeRangeStart(builder): builder.StartObject(4)
def TimeRangeAddFoo(builder, foo): builder.PrependUint8Slot(0, foo, 0)
def TimeRangeAddStart(builder, start): builder.PrependUint32Slot(1, start, 0)
def TimeRangeAddEndof(builder, endof): builder.PrependUint64Slot(2, endof, 0)
def TimeRangeAddBar(builder, bar): builder.PrependUint8Slot(3, bar, 0)
def TimeRangeEnd(builder): return builder.EndObject()
