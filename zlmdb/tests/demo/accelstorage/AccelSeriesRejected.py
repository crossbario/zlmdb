# automatically generated by the FlatBuffers compiler, do not modify

# namespace: accelstorage

import flatbuffers

# /// Error raised when the accelerometer data supplied was invalid.
# /// The error provides details about the deviation detected.
class AccelSeriesRejected(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAccelSeriesRejected(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AccelSeriesRejected()
        x.Init(buf, n + offset)
        return x

    # AccelSeriesRejected
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// In case the error was raised because of outliers,
# /// the probability of detection
    # AccelSeriesRejected
    def OutlierProbability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

# /// Number of outlier samples (individual readings) detected.
    # AccelSeriesRejected
    def OutlierCout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def AccelSeriesRejectedStart(builder): builder.StartObject(2)
def AccelSeriesRejectedAddOutlierProbability(builder, outlierProbability): builder.PrependFloat32Slot(0, outlierProbability, 0.0)
def AccelSeriesRejectedAddOutlierCout(builder, outlierCout): builder.PrependUint32Slot(1, outlierCout, 0)
def AccelSeriesRejectedEnd(builder): return builder.EndObject()
